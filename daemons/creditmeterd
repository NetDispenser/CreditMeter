#!/usr/bin/python3
import os,sys,json,logging,threading,time
from xmlrpc.server import SimpleXMLRPCServer
from daemon import Daemon
import utils
from utils import *

FORMAT = 'CREDITMETERD: %(message)s'
logging.basicConfig(filename=CREDITMETER_LOG_FULL_PATH,level=logging.DEBUG, format=FORMAT)

class CreditMeterDaemon(Daemon):

	def __init__(self,pidfile):
		Daemon.__init__(self,pidfile)
		logging.debug("creditmeterd.init")
		self.clients={}
		self.t=None
		#self.wide_closed()
		self.write_policy()

	def json_status_report(self):#to query from python shell
		return json.dumps(self.clients)

	def manage_firewall(self):
		while True:
			try:
				policy_update=False
				for key in list(self.clients):
					client=self.clients[key]
					if client['running']:
						#logging.debug(client['mac']+' is running ...')
						t_now=time.time()
						dt=int(t_now-client['t_last'])
						if dt>10:
							client['running']=False
							logging.debug("client: "+client['mac']+" running=False")
							policy_update=True
						#else:logging.debug(client['mac']+" is okay")
				if policy_update:
					dummy=self.write_policy()
				time.sleep(1)
			except:
				logging.exception("firewall checker exception")
				time.sleep(1)

	def write_policy(self):
		logging.debug("write_policy")
		try:
			cmds=getCommon()
			for key in list(self.clients):
				client=self.clients[key]
				if client['running']:
					cmds+=getMACOnly(client['mac'])#concatenate lists
				else:
					logging.debug("%s is stopped"%(client['mac']))

			cmds.append("iptables -t nat -A POSTROUTING -o %s -j MASQUERADE"%(WAN))

			for cidx in range(len(cmds)):
				logging.debug(cmds[cidx])
				os.system(cmds[cidx])
		except:
			logging.exception("exception updating iptables")
		return 0

	def add_client(self,mac):
		self.clients[mac]={
			't_instantiation':mktstamp(),
			't_elapsed':0.,
			't_elapsed_total':0.,
			't_last':time.time(),
			'running':False,
			'mac':mac,
		}
		return 0

	def update_client(self,mac):
		policy_update=False
		t_now=time.time()
		if not self.clients[mac]['running']:
			self.clients[mac]['t_last']=t_now
			self.clients[mac]['t_elapsed']=0
			policy_update=True

		dt=int(t_now-self.clients[mac]['t_last'])
		self.clients[mac]['t_elapsed']+=dt
		self.clients[mac]['t_elapsed_total']+=dt
		self.clients[mac]['t_last']=t_now
		self.clients[mac]['running']=True
		return dt,policy_update

	def start_thread(self):
		if not self.t:
			logging.debug("starting thread")
			self.t = threading.Thread(target=self.manage_firewall)
			self.t.daemon = True
			self.t.start()
			logging.debug("started.")

	def wide_open(self):
		logging.debug("wide_open")
		cmds=getWideOpen()
		for cidx in range(len(cmds)):
			logging.debug(cmds[cidx])
			os.system(cmds[cidx])
		return self.json_status_report()

	def wide_closed(self):
		logging.debug("wide_closed")
		cmds=getWideClosed()
		for cidx in range(len(cmds)):
			logging.debug(cmds[cidx])
			os.system(cmds[cidx])
		return self.json_status_report()

	def keepalive(self,*args):
		#this guy merely does as told, ie open/close iptables per mac addr.  if views tells
		#this func to keepalive then we do it, ie views checks balances etc. thus ...
		#also self.this runs a thread checking for timed-out connections to remove, notably
		#independently of calls to keepalive.  It doesn't care about the username.
		if not self.t:self.start_thread()
		username=args[0]
		mac_addrs=args[1]
		policy_update=False
		for mac in mac_addrs:
			logging.debug(mac)
			if not list(self.clients).count(mac):
				self.add_client(mac)
			dt,need_update=self.update_client(mac)#update=charge dt;rval is dt which view to charge credit balance
			if need_update:policy_update=True

		if policy_update:
			self.write_policy()
		return dt

	def run(self):
		logging.debug("run")
		#self.RUNNING=False
		self.server=SimpleXMLRPCServer((CREDITMETER_HOSTNAME,CREDITMETERD_PORT))
		self.server.register_introspection_functions()
		self.server.register_instance(self)
		self.server.serve_forever()

if __name__=="__main__":
	daemon=CreditMeterDaemon(CREDITMETER_PID)
	if len(sys.argv)==2:
		if 'start'==sys.argv[1]:daemon.start()
		elif 'stop'==sys.argv[1]:daemon.stop()
